// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: todo.sql

package db

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO "todos" ("title")
VALUES ($1)
RETURNING id, title, "createdAt", "updatedAt"
`

func (q *Queries) CreateTodo(ctx context.Context, title string) (*Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, title)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteAllTodo = `-- name: DeleteAllTodo :exec
DELETE FROM "todos"
`

func (q *Queries) DeleteAllTodo(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllTodo)
	return err
}

const getAllTodo = `-- name: GetAllTodo :many
SELECT id, title, "createdAt", "updatedAt" FROM "todos"
`

func (q *Queries) GetAllTodo(ctx context.Context) ([]*Todo, error) {
	rows, err := q.db.QueryContext(ctx, getAllTodo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
